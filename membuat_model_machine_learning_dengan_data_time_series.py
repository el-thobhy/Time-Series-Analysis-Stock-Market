# -*- coding: utf-8 -*-
"""Membuat Model Machine Learning dengan Data Time Series.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oDrMGvTQzznK24l-EL1ihI6LTkDOYcGW

Nama: Auriwan yasper

E-mail : auriwanyasper@gmail.com

# Import Modul
"""

import numpy as np
import pandas as pd
from keras.layers import Dense, LSTM
import matplotlib.pyplot as plt
import tensorflow as tf
from google.colab import files
from sklearn.model_selection import train_test_split

"""# Persiapan DataSet

upload dataset
"""

dataset = files.upload()

"""Mengubah dataset menjadi dataframe"""

df = pd.read_csv('AVA.csv')
df

df.info()

"""check apakah ada data yang hilang"""

df.isnull().sum()

"""plot data dengan matplotlib"""

#ekstraksi date dan close
date = df['Date'].values
close = df['Close'].values

#plot data
plt.figure(figsize = (20, 10))
plt.plot(date, close)
plt.title('Avista Corporation Close Value', fontsize = 20);

"""# Merancang Model

Membagi data menjadi data train dan data test
"""

data_train, data_test, close_train, close_test = train_test_split(date, close, test_size=0.2, shuffle=False)

"""Mempersiapkan Model dengan Fungsi Windowed"""

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
    series = tf.expand_dims(series, axis=-1)
    ds = tf.data.Dataset.from_tensor_slices(series)
    ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
    ds = ds.flat_map(lambda w: w.batch(window_size + 1))
    ds = ds.shuffle(shuffle_buffer)
    ds = ds.map(lambda w: (w[:-1], w[-1:]))
    return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(close_train, window_size = 60, batch_size = 100, shuffle_buffer = 1000)
test_set = windowed_dataset(close_test, window_size = 60, batch_size = 100, shuffle_buffer = 1000)

"""Merancang Model"""

model = tf.keras.models.Sequential([
  tf.keras.layers.LSTM(60, return_sequences=True),
  tf.keras.layers.LSTM(60),
  tf.keras.layers.Dense(30, activation="relu"),
  tf.keras.layers.Dense(10, activation="relu"),
  tf.keras.layers.Dense(1),
])

"""# Training Model dengan fungsi callback

Mempersiapkan Callback
"""

# Menghitung MAE
MAE = 0.1*(max(df.Close)-min(df.Close))
MAE

# Inisiasi fungsi callback dengan syarat akurasi 90%
class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if (logs.get('mae')<MAE) & (logs.get('val_mae')<MAE):
      print('\nMAE telah mencapai <10%!')
      self.model.stop_training = True

callback = myCallback()

"""compile dan training"""

# Compile Model
optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)
model.compile(
    loss=tf.keras.losses.Huber(),
    optimizer=optimizer,
    metrics=["mae"])

# Training Model
history = model.fit(
    train_set,
    batch_size = 3000,                
    epochs=100,              
    validation_data=test_set,
    callbacks=callback,      
    verbose=1)

"""Membuat plot loss dan akurasi pada saat training dan validation."""

# Mengambil nilai MAE dan loss dari training model
mae = history.history['mae']
val_mae = history.history['val_mae']
loss = history.history['loss']
val_loss = history.history['val_loss']

epochs = range(1, len(mae) + 1)

# Plot loss
plt.figure()
plt.plot(epochs, loss, 'r', label='Training loss')
plt.plot(epochs, val_loss, 'b', label='Validation loss')
plt.title('Loss plot')
plt.legend()

plt.show()

# Plot MAE
plt.plot(epochs, mae, 'r', label='Training MAE')
plt.plot(epochs, val_mae, 'b', label='Validation MAE')
plt.title('MAE plot')
plt.legend()
plt.show()